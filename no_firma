@bot.message_handler(commands=['tx'])
def confirmar_transaccion(m):
    global tempor, d_energia, b_trx, wa_dest, cant_energia, resultado_total, reactor
    try:
        import requests
        from datetime import datetime, timedelta
        import threading
        import base58
        import hashlib
        txsb = m.text.split(' ')
        txid = txsb[1]
        url_mainnet = f"https://api.trongrid.io/wallet/gettransactionbyid"
        headers = {"accept": "application/json"}
        resp = requests.post(url_mainnet, json={"value": txid}, headers=headers)
        transaction_data = resp.json()
        if 'raw_data' in transaction_data:
            monto = transaction_data['raw_data']['contract'][0]['parameter']['value'].get('amount', 'No disponible')
            monto_trx = int(monto) / 1_000_000 if monto != 'No disponible' else monto
            resultado_total = f"{resultado_total:.2f}"
            tx_wallet_destino = transaction_data['raw_data']['contract'][0]['parameter']['value'].get('owner_address', 'No disponible')
            tx_wallet_destino_pref =  tx_wallet_destino 
            tx_wallet_destino_by = bytes.fromhex(tx_wallet_destino_pref) 
            check_sum = hashlib.sha256(hashlib.sha256(tx_wallet_destino_by).digest()).digest()[:4] 
            wallet_con_check_sum = tx_wallet_destino_by + check_sum 
            tron_address = base58.b58encode(wallet_con_check_sum).decode('utf-8') 
            if tron_address != wa_dest and monto_trx != resultado_total:
                t = f"<b>Error:</b>\n\nEs posible que:\nLa Wallet <b>{tron_address}</b> o el monto de transaccion <b>{monto_trx:.2f} TRX no coincidan</b> con los parametros que especificaste la compra <b>wallet {wa_dest} monto {resultado_total} TRX</b>\n\n" \
                    f'Si realizaste una transaccion equivocada por favor contactate:\n\nüÜò <a href="https://t.me/Cvg_1995"><b>Soporte</b></a>'
                p = open(f'C:\dbases\int\dr.png', 'rb')
                bot.send_photo(m.chat.id,p, caption=t, parse_mode="html")     
                return
            else:
                val = f"\nWallet <b>{tron_address}</b> y el monto de transaccion coinciden <b>{monto_trx} TRX</b> con los parametros de la compra wallet <b>{wa_dest}</b> monto <b>{resultado_total} TRX</b> \n\n" 
            confirmacion_status = "‚ö†Ô∏è No confirmada"
            if 'ret' in transaction_data and len(transaction_data['ret']) > 0:
                if transaction_data['ret'][0].get('contractRet') == "SUCCESS":
                    confirmacion_status = "‚úÖ Confirmada - Delegando energia"    
            ya = 5
            cant_energia = cant_energia // tasa_conversion
            cant_energia = int(cant_energia)
            x = (cant_energia * tasa_conversion) + 2 #redondeo 
            energia_a_delegar = int(x * 1_000_000 )
            threading.Timer(ya, delega, args=(m, tempor, wa_dest, cant_energia, energia_a_delegar, reactor, clave_reactor)).start() 
            te_mensaje =  f" ‚åõÔ∏è Activando <b>Delegar energia</b> en <b>{ya} segundos</b>\n\n" \
                f"<b>Detalle:</b>\nDestino: <b>{wa_dest}</b>\nCantidad: <b>{x:.0f}</b>\n" \
                f"Tiempo:<b> {tempor:.0f} Segundos</b>"     
            msg = f"üìÉ Confirmacion:\n\nTXID: <b>{txid}</b>\nMonto: <b>{monto_trx} TRX</b>\n{val}<b> {confirmacion_status}</b>\n\n{te_mensaje}" 
            p = open(f'C:\dbases\int\db2.png', 'rb')
            bot.send_photo(m.chat.id,p,caption={msg} , parse_mode="html")  
        else:
            bot.reply_to(m, "Transacci√≥n no encontrada en Shasta ni en la red principal.")
    except Exception as e:
        bot.reply_to(m, f"Error: {repr(e)}")



def delega(m, tempor, wa_dest, cant_energia, energia_a_delegar, reactor, clave_reactor):
    import requests
    import threading
    try:
        p = int(energia_a_delegar // 1_000_000) + 1
        bot.reply_to(m, f"origen:{reactor}\ndestino:{wa_dest}\ncantidad: {energia_a_delegar}")
        url = "https://api.trongrid.io/wallet/delegateresource"
        payload = {
            "owner_address": reactor,
            "receiver_address": wa_dest,
            "balance": energia_a_delegar,
            "resource": "ENERGY", 
            "lock": False,
            "visible": True
        }
        headers = {
            "accept": "application/json",
            "content-type": "application/json"
        }
        resp = requests.post(url, json=payload, headers=headers)
        if resp.status_code == 200:
            tx = resp.json()
            url_firma = "https://api.trongrid.io/wallet/gettransactionsign"
            payload_firma = {
                "transaction": tx,
                "privateKey": clave_reactor
            }
            resp_firma = requests.post(url_firma, json=payload_firma, headers=headers)
            reporte = {}
            if resp_firma.status_code == 200:
                transaccion_firmada = resp_firma.json()
                if not transaccion_firmada.get("signature"):
                    bot.reply_to(m, "Error: No se pudo firmar la transacci√≥n.")
                    return
                url_broadcast = "https://api.trongrid.io/wallet/broadcasttransaction"
                response_broadcast = requests.post(url_broadcast, json=transaccion_firmada, headers=headers)
                if response_broadcast.status_code == 200:
                    reporte = response_broadcast.json()
                if reporte and 'result' in reporte and reporte['result']:
                    bot.reply_to(m, f"Delegaci√≥n exitosa:\nTxID: {reporte.get('txid', 'No txid returned')}")
                else:
                    bot.reply_to(m, f"Error al enviar la transacci√≥n: {reporte.get('message', 'No message returned')}")
            else:
                bot.reply_to(m, "Error al firmar la transacci√≥n")
        else:
            bot.reply_to(m, f"Error al delegar: {resp.text}")
        t = int(tempor)
        if tempor is not None and tempor > 0:
            threading.Timer(tempor, desdelegar, args=(m, wa_dest, reactor, energia_a_delegar)).start()
            msg = f"‚ò¢Ô∏è Simulando delegar energ√≠a:\n\nTiempo: <b>{t} segundos</b>  |   Cantidad: <b>{cant_energia} TRX (‚ò¢Ô∏è {p})\nWallet <b>{wa_dest}</b>\n</b>\nDetalle:\n{reporte}\nGracias por utilizar @TRXenergIA_bot"
            p = open(f'C:/dbases/int/denv.png', 'rb')
            bot.send_photo(m.chat.id, p, caption=msg, parse_mode="html")  
        else:
            bot.reply_to(m, "Error: `tempor` no tiene un valor v√°lido para el temporizador.")
    except Exception as e:
        bot.reply_to(m, f"Error: {repr(e)}")
